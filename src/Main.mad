import Array from "Array"
import Float from "Float"

import Camera from "./Camera2D"
import Camera3D from "./Camera3D"
import Draw from "./Draw"
import Gl from "./Gl"
import Math from "./Math"
import Mouse from "./Mouse"
import Rectangle from "./Rectangle"
import RenderTexture from "./RenderTexture"
import Shader from "./Shader"
import Texture from "./Texture"
import Triangle from "./Triangle"
import Window from "./Window"
import Keyboard from "./Keyboard"



VS_SHADER = `
#version 330
in vec4 vertexPosition;
in vec2 vertexTexCoord;

uniform vec2 uLightPosition;
uniform float uElevation;
uniform mat4 mvp;

out vec2 vPosition;
out vec3 vLightPosition;
out vec2 fragTexCoord;


void main () {
  vLightPosition = (mvp * vec4(uLightPosition.xy, 0.0, 1.0)).xyz;
  vLightPosition.z = 0.2;
  // vLightPosition.z = uElevation;//min(1, max(0, uElevation));
  vLightPosition.y = vLightPosition.y + uElevation * 0.7547;
  gl_Position = mvp * vec4(vertexPosition.xyz, 1.0);
  vPosition = gl_Position.xy;
  fragTexCoord = vertexTexCoord;
}
`

FS_SHADER = `
#version 330
in vec3 vLightPosition;
in vec2 vPosition;
in vec2 fragTexCoord;

uniform mat4 matView;
uniform mat4 matModel;
uniform mat3 matNormal;
uniform sampler2D texture0;
uniform sampler2D uNormalMap;
uniform sampler2D uHeightMap;
uniform vec4 uLightColor;
uniform float uFalloff;
uniform float uIntensity;

out vec4 finalColor;


void main() {
  vec4 diffuse = texture(texture0, fragTexCoord);
  float z = texture(uHeightMap, fragTexCoord).y / 256;
  vec3 pixelPosition = vec3(vPosition.x, vPosition.y - z * 0.7547, z);
  vec3 lightPosition = vLightPosition;
  // vec3 lightPosition = vec3(vLightPosition.xy, uElevation);

  // Ambiant
  float ambiant = 0.0;

  // Normal
  vec3 normal = 2 * vec3(texture(uNormalMap, fragTexCoord)) - 1.0;
  vec3 norm = normalize(normal);

  // Diffuse
  vec3 lightDir = normalize(lightPosition - pixelPosition);  
  float diff = max(dot(norm, lightDir), 0.0);

  // Blinn Specular
  float specularStrength = 0.2;
  vec3 viewPos = vec3(0.0, 0.0, 1.0);
  vec3 viewDir = normalize(viewPos - pixelPosition);

  vec3 halfwayDir = normalize(lightDir + viewDir);
  float spec = pow(max(dot(norm, halfwayDir), 0.0), 32) * specularStrength;

  // Attenuation
  float distance = length(lightPosition - pixelPosition);
  float constant = 1;
  float linear = 10.0 * uFalloff;
  float quadratic = 50 * uFalloff;
  float attenuation = 1.0 / (constant + linear * distance + quadratic * (distance * distance));

  float lightDiffX = vPosition.x - lightPosition.x;
  float lightDiffY = vPosition.y - lightPosition.y;
  if (lightDiffX < 0.01 && lightDiffX > 0.0 && lightDiffY < 0.01 && lightDiffY > 0.0) {
    finalColor = vec4(1.0);
  } else {
    finalColor = diffuse + (diff + spec + ambiant) * vec4(attenuation * uLightColor.xyz * uIntensity, 1.0);
    // finalColor = (diffuse * vec4(0.4, 0.4, 0.7, 1.0)) + (diff + spec + ambiant) * vec4(attenuation * uLightColor.xyz * uIntensity, 1.0);
  }

  // finalColor.xyz = pow(finalColor.xyz, vec3(1.0 / 2.2));
  // finalColor = ((attenuation * diff) + (spec * specularStrength) + ambiant) * vec4(uLightColor.xyz * uIntensity, 1.0);
}
`


V_SHADER_SHADOW = `
#version 330
in vec3 vertexPosition;
in vec2 vertexTexCoord;

uniform mat4 mvp;

out vec2 fragTexCoord;
out vec2 vPosition;

void main() {
  // vec2 vLightPosition = (mvp * vec4(uLightPosition.x, uLightPosition.y, 1.0, 1.0)).xy;
  vec4 position = mvp * vec4(vertexPosition.xy, 0.0, 1.0);

  fragTexCoord = vertexTexCoord;
  vPosition = position.xy;
  gl_Position = position;
}
`

F_SHADER_SHADOW = `
#version 330
in vec2 vPosition;
in vec2 fragTexCoord;

uniform sampler2D uHeightMap;

out vec4 finalColor;

void main() {
  float z = texture(uHeightMap, fragTexCoord).y * 3;
  vec3 pixelPosition = vec3(vPosition.x, vPosition.y - z * 0.7547, z);
  float distance = length(pixelPosition - vec3(-0.3, 0.0, 0.2));
  finalColor = vec4(distance, distance, distance, 1.0);
  // finalColor = vec4(normalize(pixelPosition), 1.0);

  // finalColor = vec4(z, z, z, 1.0);
}
`

type Direction = Down | Right

main = () => {
  camera = { offset: { x: 400 - 128, y: 300 - 128 }, rotation: 0, target: { x: 0, y: 0 }, zoom: 1 }
  lightCamera = { offset: { x: 0, y: 0 }, rotation: 0, target: { x: 0, y: 0 }, zoom: 1 }
  Window.init(800, 600, "MadRaylib")
  Window.setTargetFps(50)
  tex = Texture.load("./beauty.png")
  // tex2 = Texture.load("./normal.png")
  // tex3 = Texture.load("./heightmap.png")

  tex2 = Texture.load("./normal.png")
  tex3 = Texture.load("./house_heightmap.png")
  angle = 0

  shadowTexture = RenderTexture.load(800, 600)

  barbarianWalkDownTextures = Array.fromList([
    Texture.load("./barbarian/walk_down/barbarian_0000.png"),
    Texture.load("./barbarian/walk_down/barbarian_0005.png"),
    Texture.load("./barbarian/walk_down/barbarian_0010.png"),
    Texture.load("./barbarian/walk_down/barbarian_0015.png"),
    Texture.load("./barbarian/walk_down/barbarian_0020.png"),
    Texture.load("./barbarian/walk_down/barbarian_0025.png"),
    Texture.load("./barbarian/walk_down/barbarian_0030.png"),
    Texture.load("./barbarian/walk_down/barbarian_0035.png"),
  ])
  barbarianWalkRightTextures = Array.fromList([
    Texture.load("./barbarian/walk_right/barbarian_0000.png"),
    Texture.load("./barbarian/walk_right/barbarian_0005.png"),
    Texture.load("./barbarian/walk_right/barbarian_0010.png"),
    Texture.load("./barbarian/walk_right/barbarian_0015.png"),
    Texture.load("./barbarian/walk_right/barbarian_0020.png"),
    Texture.load("./barbarian/walk_right/barbarian_0025.png"),
    Texture.load("./barbarian/walk_right/barbarian_0030.png"),
    Texture.load("./barbarian/walk_right/barbarian_0035.png"),
  ])
  texIndex = 0

  lightShader = Shader.loadFromMemory(VS_SHADER, FS_SHADER)
  shadowShader = Shader.loadFromMemory(V_SHADER_SHADOW, F_SHADER_SHADOW)

  light1Position = { x: 200, y: 200 }
  lightElevation = 0.3

  i = 1
  warriorY = 0
  warriorX = 0
  direction = Down


  while(!Window.shouldClose()) do {
    angle := angle + 5
    Draw.begin()
    Draw.clearBackground({ r: 20, g: 20, b: 20, a: 255 })
    light1Position := Camera.getScreenToWorld2D(Mouse.getPosition(), camera)

    if (Keyboard.isKeyDown(Keyboard.KeyA)) do {
      camera.target.x := camera.target.x - 2
    }
    if (Keyboard.isKeyDown(Keyboard.KeyW)) do {
      camera.target.y := camera.target.y - 2
    }
    if (Keyboard.isKeyDown(Keyboard.KeyD)) do {
      direction := Right
      i := i + 1
      camera.target.x := camera.target.x + 4
      warriorX := warriorX + 4
    }
    if (Keyboard.isKeyDown(Keyboard.KeyS)) do {
      direction := Down
      i := i + 1
      camera.target.y := camera.target.y + 4
      warriorY := warriorY + 4
    }
    if (Keyboard.isKeyReleased(Keyboard.KeyS) || Keyboard.isKeyReleased(Keyboard.KeyD)) do {
      i := 1
      texIndex := 0
    }
    if (Keyboard.isKeyDown(Keyboard.KeyLeft)) do {
      camera.zoom := camera.zoom - 0.01
    }
    if (Keyboard.isKeyDown(Keyboard.KeyRight)) do {
      camera.zoom := camera.zoom + 0.01
    }
    if (Keyboard.isKeyDown(Keyboard.KeyUp)) do {
      lightElevation := lightElevation + 0.03
    }
    if (Keyboard.isKeyDown(Keyboard.KeyDown)) do {
      lightElevation := lightElevation - 0.03
    }


    Camera.begin2DMode(camera)
    Shader.beginShaderMode(lightShader)
    Shader.setUniformFloat("uElevation", lightElevation, lightShader)
    Shader.setUniformVec2("uLightPosition", light1Position, lightShader)
    Shader.setUniformVec4("uLightColor", { x: 240, y: 160, z: 100, w: 255 }, lightShader)
    Shader.setUniformFloat("uIntensity", 2, lightShader)
    Shader.setUniformFloat("uFalloff", 300, lightShader)
    Shader.setUniformTexture("uNormalMap", tex2, lightShader)
    Shader.setUniformTexture("uHeightMap", tex3, lightShader)
    Texture.drawPro(
      tex,
      { x: 0, y: 0, width: 600, height: 600 },
      { x: 0, y: 0, width: 1800, height: 1800 },
      { x: 0, y: 0 },
      0,
      { r: 255, g: 255, b: 255, a: 255 },
    )

    // Draw.beginBlendMode(Draw.Additive)
    // Shader.setUniformFloat("uElevation", 0.2, lightShader)
    // Shader.setUniformVec2("uLightPosition", { x: 50, y: 200 }, lightShader)
    // Shader.setUniformVec4("uLightColor", { x: 120, y: 140, z: 240, w: 255 }, lightShader)
    // Shader.setUniformFloat("uIntensity", 0.01, lightShader)
    // Shader.setUniformFloat("uFalloff", 0.3, lightShader)
    // Shader.setUniformTexture("uNormalMap", tex2, lightShader)
    // Shader.setUniformTexture("uHeightMap", tex3, lightShader)
    // Texture.drawPro(
    //   tex,
    //   { x: 0, y: 0, width: 1024, height: 768 },
    //   { x: 0, y: 0, width: 800, height: 600 },
    //   { x: 0, y: 0 },
    //   0,
    //   { r: 255, g: 255, b: 255, a: 255 },
    // )
    // Draw.endBlendMode()

    // Draw.beginBlendMode(Draw.Additive)
    // Shader.setUniformVec2("uLightPosition", { x: 500, y: 0 }, lightShader)
    // Shader.setUniformFloat("uIntensity", 0.1, lightShader)
    // Texture.drawPro(
    //   tex,
    //   { x: 0, y: 0, width: 1024, height: 768 },
    //   { x: 0, y: 0, width: 800, height: 600 },
    //   { x: 0, y: 0 },
    //   0,
    //   { r: 255, g: 255, b: 255, a: 255 },
    // )

    // Draw.endBlendMode()

    textures = direction == Right ? barbarianWalkRightTextures : barbarianWalkDownTextures

    Shader.endShaderMode()
    Texture.draw(textures[texIndex % 8], warriorX, warriorY, { r: 255, g: 255, b: 255, a: 255 })
    Camera.end2DMode()

    Draw.end()

    if (i % 6 == 0) do {
      texIndex := texIndex + 1
    }
  }

  RenderTexture.unload(shadowTexture)
  Texture.unload(tex)
  Window.close()
}
