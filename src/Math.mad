import Array from "Array"
import Math from "Math"



// typedef struct Vector2 {
//     float x;                // Vector x component
//     float y;                // Vector y component
// } Vector2;
export alias Vector2 = { x :: Float, y :: Float }

// typedef struct Vector3 {
//     float x;                // Vector x component
//     float y;                // Vector y component
//     float z;                // Vector z component
// } Vector3;
export alias Vector3 = { x :: Float, y :: Float, z :: Float }

// typedef struct Vector4 {
//     float x;                // Vector x component
//     float y;                // Vector y component
//     float z;                // Vector z component
//     float w;                // Vector w component
// } Vector4;
export alias Vector4 = { w :: Float, x :: Float, y :: Float, z :: Float }



getAngle = (a, b) => Math.atan2(a.y - b.y, a.x - b.x)

getDistance = (a, b) => Math.sqrt(Math.square(a.x - b.x) + Math.square(a.y - b.y))
import IO from "IO"



getBackpointsFrom :: Vector2 -> Array Vector2 -> Array Vector2
export getBackpointsFrom = (vec2, polygon) => {
  derivedInfo = map((v) => ({ angle: getAngle(vec2, v), distance: getDistance(vec2, v) }), polygon)
  arrLength = Array.length(polygon)

  i = 0
  min = { index: -1, angle: 10, distance: Math.pow(2, 62) }
  max = { index: -1, angle: -10, distance: 0 }
  while(i < arrLength) do {
    angle = derivedInfo[i].angle
    distance = derivedInfo[i].distance
    if (angle < min.angle || angle == min.angle && distance > min.distance) do {
      min.index := i
      min.angle := angle
      min.distance := distance
    }

    if (angle > max.angle || angle == max.angle && distance > max.distance) do {
      max.index := i
      max.angle := angle
      max.distance := distance
    }

    i := i + 1
  }

  startBound = min.distance
    > derivedInfo[(min.index + 1) % arrLength].distance
    && ((min.index - 1) % arrLength != max.index)
    ? max
    : min
  endBound = min.distance
    > derivedInfo[(min.index + 1) % arrLength].distance
    && ((min.index - 1) % arrLength != max.index)
    ? min
    : max

  res = Array.init(arrLength)
  i := startBound.index
  while(i % arrLength != endBound.index) do {
    Array.push(polygon[i % arrLength], res)
    i := i + 1
  }
  Array.push(polygon[i % arrLength], res)
  return res
}
