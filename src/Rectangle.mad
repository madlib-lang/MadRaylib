import type { Color } from "./Color"
import type { Vector2 } from "./Math"



// Rectangle, 4 components
// typedef struct Rectangle {
//     float x;                // Rectangle top-left corner position x
//     float y;                // Rectangle top-left corner position y
//     float width;            // Rectangle width
//     float height;           // Rectangle height
// } Rectangle;
export alias Rectangle = { height :: Float, width :: Float, x :: Float, y :: Float }

draw :: Float -> Float -> Float -> Float -> Color -> {}
export draw = extern "madraylib__rectangle__draw"

drawV :: Vector2 -> Vector2 -> Color -> {}
export drawV = extern "madraylib__rectangle__drawV"

drawPro :: Rectangle -> Vector2 -> Float -> Color -> {}
export drawPro = extern "madraylib__rectangle__drawPro"

drawRec :: Rectangle -> Color -> {}
export drawRec = extern "madraylib__rectangle__drawRec"

drawLines :: Float -> Float -> Float -> Float -> Color -> {}
export drawLines = extern "madraylib__rectangle__drawLines"

drawLinesEx :: Rectangle -> Float -> Color -> {}
export drawLinesEx = extern "madraylib__rectangle__drawLinesEx"

drawRounded :: Rectangle -> Float -> Short -> Color -> {}
export drawRounded = extern "madraylib__rectangle__drawRonded"

drawRoundedLines :: Rectangle -> Float -> Short -> Float -> Color -> {}
export drawRoundedLines = extern "madraylib__rectangle__drawRonded"

drawGradientV :: Float -> Float -> Float -> Float -> Color -> Color -> {}
export drawGradientV = extern "madraylib__rectangle__drawGradientV"

drawGradientH :: Float -> Float -> Float -> Float -> Color -> Color -> {}
export drawGradientH = extern "madraylib__rectangle__drawGradientH"

drawGradientEx :: Rectangle -> Color -> Color -> Color -> Color -> {}
export drawGradientEx = extern "madraylib__rectangle__drawGradientEx"
