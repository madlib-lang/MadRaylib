import type { Vector2, Vector3, Vector4 } from "./Math"
import type { Texture } from "./Texture"

type Shader = __Shader__
export type Shader

getShaderLocation :: Shader -> String -> Short
getShaderLocation = extern "madraylib__shader__getShaderLocation"

setShaderValueFFI :: Shader -> Short -> a -> Short -> {}
setShaderValueFFI = extern "madraylib__shader__setShaderValue"

setShaderValuesFFI :: Shader -> Short -> Array a -> Short -> {}
setShaderValuesFFI = extern "madraylib__shader__setShaderValues"

setShaderValues :: Short -> String -> Array a -> Shader -> Shader
setShaderValues = (t, name, value, shader) => {
  setShaderValuesFFI(shader, getShaderLocation(shader, name), value, t)
  return shader
}

setShaderValue :: Short -> String -> a -> Shader -> Shader
setShaderValue = (t, name, value, shader) => {
  setShaderValueFFI(shader, getShaderLocation(shader, name), value, t)
  return shader
}

// typedef enum {
//     SHADER_UNIFORM_FLOAT = 0,       // Shader uniform type: float
//     SHADER_UNIFORM_VEC2,            // Shader uniform type: vec2 (2 float)
//     SHADER_UNIFORM_VEC3,            // Shader uniform type: vec3 (3 float)
//     SHADER_UNIFORM_VEC4,            // Shader uniform type: vec4 (4 float)
//     SHADER_UNIFORM_INT,             // Shader uniform type: int
//     SHADER_UNIFORM_IVEC2,           // Shader uniform type: ivec2 (2 int)
//     SHADER_UNIFORM_IVEC3,           // Shader uniform type: ivec3 (3 int)
//     SHADER_UNIFORM_IVEC4,           // Shader uniform type: ivec4 (4 int)
//     SHADER_UNIFORM_SAMPLER2D        // Shader uniform type: sampler2d
// } ShaderUniformDataType;

setUniformFloats :: String -> Array Float -> Shader -> Shader
export setUniformFloats = setShaderValues(0)

setUniformVec2s :: String -> Array Vector2 -> Shader -> Shader
export setUniformVec2s = setShaderValues(1)

setUniformVec3s :: String -> Array Vector3 -> Shader -> Shader
export setUniformVec3s = setShaderValues(2)

setUniformVec4s :: String -> Array Vector4 -> Shader -> Shader
export setUniformVec4s = setShaderValues(3)

setUniformFloat :: String -> Float -> Shader -> Shader
export setUniformFloat = setShaderValue(0)

setUniformVec2 :: String -> Vector2 -> Shader -> Shader
export setUniformVec2 = setShaderValue(1)

setUniformVec3 :: String -> Vector3 -> Shader -> Shader
export setUniformVec3 = setShaderValue(2)

setUniformVec4 :: String -> Vector4 -> Shader -> Shader
export setUniformVec4 = setShaderValue(3)

setUniformShort :: String -> Short -> Shader -> Shader
export setUniformShort = setShaderValue(4)

setUniformTextureFFI :: Shader -> Short -> Texture -> {}
setUniformTextureFFI = extern "madraylib__shader__setShaderValueTexture"

setUniformTexture :: String -> Texture -> Shader -> Shader
export setUniformTexture = (name, texture, shader) => {
  setUniformTextureFFI(shader, getShaderLocation(shader, name), texture)
  return shader
}

beginShaderMode :: Shader -> {}
export beginShaderMode = extern "madraylib__shader__beginShaderMode"

endShaderMode :: {} -> {}
export endShaderMode = extern "madraylib__shader__endShaderMode"

load :: String -> String -> Shader
export load = extern "madraylib__shader__load"

loadFromMemory :: String -> String -> Shader
export loadFromMemory = extern "madraylib__shader__loadFromMemory"

unloadShader :: Shader -> {}
export unloadShader = extern "madraylib__shader__unloadShader"
