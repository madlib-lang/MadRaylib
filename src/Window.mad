import Function from "Function"
import List from "List"



// typedef enum {
//   FLAG_VSYNC_HINT         = 0x00000040,   // Set to try enabling V-Sync on GPU
//   FLAG_FULLSCREEN_MODE    = 0x00000002,   // Set to run program in fullscreen
//   FLAG_WINDOW_RESIZABLE   = 0x00000004,   // Set to allow resizable window
//   FLAG_WINDOW_UNDECORATED = 0x00000008,   // Set to disable window decoration (frame and buttons)
//   FLAG_WINDOW_HIDDEN      = 0x00000080,   // Set to hide window
//   FLAG_WINDOW_MINIMIZED   = 0x00000200,   // Set to minimize window (iconify)
//   FLAG_WINDOW_MAXIMIZED   = 0x00000400,   // Set to maximize window (expanded to monitor)
//   FLAG_WINDOW_UNFOCUSED   = 0x00000800,   // Set to window non focused
//   FLAG_WINDOW_TOPMOST     = 0x00001000,   // Set to window always on top
//   FLAG_WINDOW_ALWAYS_RUN  = 0x00000100,   // Set to allow windows running while minimized
//   FLAG_WINDOW_TRANSPARENT = 0x00000010,   // Set to allow transparent framebuffer
//   FLAG_WINDOW_HIGHDPI     = 0x00002000,   // Set to support HighDPI
//   FLAG_WINDOW_MOUSE_PASSTHROUGH = 0x00004000, // Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED
//   FLAG_BORDERLESS_WINDOWED_MODE = 0x00008000, // Set to run program in borderless windowed mode
//   FLAG_MSAA_4X_HINT       = 0x00000020,   // Set to try enabling MSAA 4X
//   FLAG_INTERLACED_HINT    = 0x00010000    // Set to try enabling interlaced video format (for V3D)
// } ConfigFlags;
export type ConfigFlag
  = VSyncHint
  | FullScreenMode
  | Resizable
  | Undecorated
  | Hidden
  | Minimized
  | Maximized
  | Unfocused
  | TopMost
  | AlwaysRun
  | Transparent
  | HighDpi
  | MousePassThrough
  | BorderlessWindowedMode
  | MSAA4XHint
  | InterlacedHint

flagToShort :: ConfigFlag -> Short
flagToShort = where {
  VSyncHint =>
    0x00000040_s

  FullScreenMode =>
    0x00000002_s

  Resizable =>
    0x00000004_s

  Undecorated =>
    0x00000008_s

  Hidden =>
    0x00000080_s

  Minimized =>
    0x00000200_s

  Maximized =>
    0x00000400_s

  Unfocused =>
    0x00000800_s

  TopMost =>
    0x00001000_s

  AlwaysRun =>
    0x00000100_s

  Transparent =>
    0x00000010_s

  HighDpi =>
    0x00002000_s

  MousePassThrough =>
    0x00004000_s

  BorderlessWindowedMode =>
    0x00008000_s

  MSAA4XHint =>
    0x00000020_s

  InterlacedHint =>
    0x00010000_s
}

flagsToShort :: List ConfigFlag -> Short
flagsToShort = (flags) => pipe(
  List.uniqueBy(Function.equals),
  map(flagToShort),
  List.reduce((a, b) => a | b, 0),
)(flags)

setConfigFlagsFFI :: Short -> {}
setConfigFlagsFFI = extern "madraylib__window__setConfigFlags"

setConfigFlags :: List ConfigFlag -> {}
export setConfigFlags = pipe(
  flagsToShort,
  setConfigFlagsFFI,
)

setWindowStateFFI :: Short -> {}
setWindowStateFFI = extern "madraylib__window__setWindowState"

setWindowState :: List ConfigFlag -> {}
export setWindowState = pipe(
  flagsToShort,
  setWindowStateFFI,
)

clearWindowStateFFI :: Short -> {}
clearWindowStateFFI = extern "madraylib__window__clearWindowState"

clearWindowState :: List ConfigFlag -> {}
export clearWindowState = pipe(
  flagsToShort,
  clearWindowStateFFI,
)

isWindowStateEnabledFFI :: Short -> Boolean
isWindowStateEnabledFFI = extern "madraylib__window__isWindowStateEnabled"

isWindowStateEnabled :: ConfigFlag -> Boolean
export isWindowStateEnabled = pipe(
  flagToShort,
  isWindowStateEnabledFFI,
)

init :: Short -> Short -> String -> {}
export init = extern "madraylib__window__init"

isReady :: {} -> Boolean
export isReady = extern "madraylib__window__isReady"

isResized :: {} -> Boolean
export isResized = extern "madraylib__window__isResized"

getScreenWidth :: {} -> Short
export getScreenWidth = extern "madraylib__window__getScreenWidth"

getScreenHeight :: {} -> Short
export getScreenHeight = extern "madraylib__window__getScreenHeight"

setTargetFps :: Short -> {}
export setTargetFps = extern "madraylib__window__setTargetFPS"

shouldClose :: {} -> Boolean
export shouldClose = extern "madraylib__window__shouldClose"

close :: {} -> {}
export close = extern "madraylib__window__close"
